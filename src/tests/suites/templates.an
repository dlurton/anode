{
    # <> should be optional with no arguments
    template T1<> a:int = 1
    template T2 b:int = 2

    expand T1<>
    expand T2

    assert(1 == a)
    assert(2 == b)
}
{
    # template expansion/generic class with simple scalar type arguments.

    template TNode<TItem> {
        class Node {
            next:Node
            item:TItem
        }
    }

    namespace TestInt expand TNode<int>

    n1:TestInt::Node = new TestInt::Node()
    n1.next = new TestInt::Node()
    n1.item = 10
    n1.next.item = 11
    assert(n1.item == 10)
    assert(n1.next.item == 11)

    namespace TestFloat expand TNode<float>
    n2:TestFloat::Node = new TestFloat::Node()
    n2.next = new TestFloat::Node()
    n2.item = 20.0
    n2.next.item = 21.0
    assert(n2.item == 20.0)
    assert(n2.next.item == 21.0)

    # template expansion/generic class with class type argument.
    class Item { value:int }

    namespace TestItem expand TNode<Item>

    n3: TestItem::Node = new TestItem::Node()
    n3.item = new Item()
    n3.item.value = 20
    n3.next = new TestItem::Node()
    n3.next.item = new Item()
    n3.next.item.value = 21
    assert(n3.item.value == 20)
    assert(n3.next.item.value == 21)

} {

    #Template expansions with various primitives.

    template TTest<TTypeA, TTypeB, TTypeC> {
        class Test {
            a:TTypeA b:TTypeB c:TTypeC
        }
    }
    namespace n1 expand TTest<int, float, bool>
    namespace n2 expand TTest<float, bool, int>
    namespace n3 expand TTest<bool, int, float>

    t1:n1::Test = new n1::Test()
    t1.a = 789
    t1.b = 790.0
    t1.c = true
    assert(789 == t1.a)
    assert(790.0 == t1.b)
    assert(true == t1.c)
    t1.c = false
    assert(false == t1.c)

    t2:n2::Test = new n2::Test()
    t2.a = 790.0
    t2.b = true
    t2.c = 789
    assert(790.0 == t2.a)
    assert(true == t2.b)
    assert(789 == t2.c)
    t2.b = false
    assert(false == t2.b)

    t3:n3::Test = new n3::Test()
    t3.a = true
    t3.b = 789
    t3.c = 789.0
    assert(true == t3.a)
    assert(789 == t3.b)
    assert(789.0 == t3.c)
    t3.a = false
    assert(false == t3.a)
} {

    #template expansions can have a generic type as one of its arguments.

    template TBar<T> {
        class Bar {
          a:T
        }
    }
    template TFoo<T> {
        class Foo {
            b:T
        }
    }

    expand TBar<int>
    expand TFoo<Bar>

    f:Foo = new Foo()
    f.b = new Bar()
    f.b.a = 1024

    assert(f.b.a == 1024)
} {

    #add fields and functions to a class via template expansion

    template TCommon {
        widgetId:int
        func setWidgetId:void(id:int) widgetId = id
        func getWidgetId:int() widgetId
    }

    class CommonClass {
        expand TCommon
        # access field defined within template
        func getWidgetIdTimes10:int() widgetId * 10
    }

    c:CommonClass = new CommonClass()
    c.setWidgetId(1024)
    assert(1024 == c.getWidgetId())
    assert(10240 == c.getWidgetIdTimes10())
}
# namespaces declared within templates are relative to the namespaces in which they are expanded
{
    template SomeTemplate {
        namespace Foo someValue:int
    }

    namespace ns1 expand SomeTemplate
    namespace ns2 expand SomeTemplate
    ns1::Foo::someValue = 15
    ns2::Foo::someValue = 16
    assert(ns1::Foo::someValue == 15)
    assert(ns2::Foo::someValue == 16)
}

# templates can exist within classes
{
    class SomeClass {
        template SomeTemplate {
            func someFunc:int() 5729
        }
        expand SomeTemplate
    }
    s: SomeClass = new SomeClass()
    assert(5729 == s.someFunc())
}

# templates can exist within functions
{
    func someFunc:int() {
        template return1069 1069
        expand return1069
    }

    assert(1069 == someFunc())
}

# templates expansions as expressions
# note:  This seems like unusual syntax that may need refinement.
{
    template foo {
        1234
    }
    assert(1234 == expand foo)
}
