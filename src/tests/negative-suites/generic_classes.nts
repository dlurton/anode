class Node<TItem> { }
a:Node<int>
b:Node<float>
b = a #incompatible types
?InvalidImplicitCastInBinaryExpr, 4, 3

#############################################################################
# too few generic arguments
class C<T, TT> { }
c:C<int>
?IncorrectNumberOfGenericArguments, 5, 3

#############################################################################
# too many generic arguments
class C<T, TT> { }
c:C<int, float, bool>
?IncorrectNumberOfGenericArguments, 5, 3

#############################################################################
# assignment of variable with generic type with a value of the same generic type but different type arguments
class Temp<T> { }
tempInt:Temp<int>
tempFloat:Temp<float> = tempInt
?InvalidImplicitCastInBinaryExpr, 6, 23

#############################################################################
# can't reference non-generic classes as if they were generic
class S { }
a:S<int>
?TypeIsNotGenericButIsReferencedWithGenericArgs, 5, 3
